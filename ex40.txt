mystuff = {'apple': "I am apples!"}
print mystuff['apple']

idea of "Get X from Y"
or "get apple from mystuff"
or "get key from dict"

module called mystuff.py
function in module called apple

# this goes in mystuff.py
def apple():
    print "I am apples!"
    
# this is just a variable 
tangerine = "Living reflection of a dream"
    
then can import that module and access apple function with:

import mystuff
mystuff.apple()

a variable (for example tangerine) can be placed into the module also
    ^see above
and it can be accessed the same way:

import mystuff
mystuff.apple()
print mystuff.tangerine

SO...

mystuff['apple']    # get apple from dict
mystuff.apple()     # get apple from module
mystuff.tangerine   # same thing, it's just a variable


Common pattern in Python is:
    1. Take a key=value style container
    2. Get something out of it by the key's name
    
    SO...
    
    in dict key=value is straight forward, dict[key] returns value
    ZED:    In the case of the dictionary, the key is a string and
            the syntax is [key]
            
    in module key=value is tougher:
        module.key()  --    calls function from module, returns value 
                            NOTE arguments are passed to function inside ()
        module.key    --    calls variable from module, value == variable value
    ZED:    In the case of the module, the key is an identifier, and the
            syntax is .key 
        

A class is another construct python uses
A class groups functions and data and places them into a container
functions and data in a class can be accessed with the .(dot) operator

creating a class like the mystuff module

class MyStuff(object):      # notice capitals in class name are okay

    def __init__(self):     
        self.tangerine = "And now a thousand years between"
        
    def apple(self):        # this is an apple function in MyStuff class
        print "I am classy apples!"
   
   
OHHHH! just got why classes are better than modules, imported modules
    you can only have one for the entire program, but classes can be
    combined with other classes over and over without interfering with
    eachother

BUT
if class is like module, how to import class?
"instantiate" == "create"
when you instantiate a class, what you get is called an object

instantiate(create) a class by calling the class like it's a function:

thing = MyStuff()
thing.apple()
print thing.tangerine


How To get things from things:

# dict style
mystuff['apples']

# module style
mystuff.apples()
print mystuff.tangerine

# class style
thing = MyStuff()
thing.apples()
print thing.tangerine
























    



